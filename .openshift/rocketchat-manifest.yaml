kind: Template
apiVersion: v1
metadata:
  name: rocket-chat
  annotations:
    description: "Rocket.Chat Deployment"
    iconClass: "icon-nodejs"
    tags: "nodejs,mongodb,replication,instant-app"

parameters:
  - name: APPLICATION_NAME
    description: The name assigned to the application
    displayName: Application Name
    required: true
    value: rocketchat-maintenance

  - name: ROCKETCHAT_IMAGE
    description: Location of the RocketChat Image
    displayName: RocketChat Image
    value: registry.hub.docker.com/library/rocket.chat
    required: true

  # specify the version
  - name: ROCKETCHAT_IMAGE_TAG
    description: Name of the RocketChat tag that should be used
    displayName: RocketChat Tag
    value: "3.0"
    required: true

  - name: FILE_UPLOAD_STORAGE_SIZE
    description: The size of storage to allocate for file uploads to RocketChat
    displayName: File Upload Storage Size
    required: true

  # specify the storage class
  - name: SC_FILE_UPLOAD
    description: The Storage Class for the RocketChat uploads volume
    displayName: File Uploads Storage Class 
    required: true

  - name: HOSTNAME_HTTPS
    description: Hostname serving the application
    displayName: Route Name
    required: true

  - name: ROCKETCHAT_ADMIN_PASSWORD
    displayName: "RocketChat Admin Password"
    description: "Password for the RocketChat admin user."
    generate: expression
    from: "[a-zA-Z0-9]{16}"
    required: true

  - name: ROCKETCHAT_REPLICAS
    description: Number of RocketChat replica pods
    displayName: RocketChat Replicas
    required: true

  - name: ROCKETCHAT_MIN_HPA
    description: Min Number of RocketChat pods for HPA
    displayName: RocketChat Min HPA
    required: true

  - name: ROCKETCHAT_MAX_HPA
    description: Max Number of RocketChat pods for HPA
    displayName: RocketChat Max HPA
    required: true
  
  - name: MEMORY_REQUEST
    description: Amount of Memory to Request.
    displayName: Memory Request
    required: true

  - name: MEMORY_LIMIT
    description: Amount of Memory to Limit.
    displayName: Memory Limit
    required: true

  - name: CPU_REQUEST
    description: Amount of CPU to Request.
    displayName: Memory Request
    required: true

  - name: CPU_LIMIT
    description: Amount of CPU to Limit.
    displayName: Memory Limit
    required: true

  - name: MONGODB_SECRET_NAME
    displayName: MongoDB Secret.
    description: Name of the Secret containing MongoDB Assets
    value: "mongodb"
    required: true

objects:
  # Create a local istag for RC from docker
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      lookupPolicy:
        local: false
      tags:
      - annotations: null
        from:
          kind: DockerImage
          name: ${ROCKETCHAT_IMAGE}:${ROCKETCHAT_IMAGE_TAG}
        importPolicy: {}
        name: "${ROCKETCHAT_IMAGE_TAG}"
        referencePolicy:
          type: Source

  # Secret for admin user credential
  - apiVersion: v1
    kind: Secret
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-admin-secret
    data:
      ADMIN_USERNAME: "admin"
      ADMIN_PASS: "${ROCKETCHAT_ADMIN_PASSWORD}"

  # TODO: add a configmap for initial setup

  # Service for the Rocketchat NodeJS service
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      ports:
      - name: 3000-tcp
        port: 3000
        protocol: TCP
        targetPort: 3000
      selector:
        app: ${APPLICATION_NAME}
        deploymentConfig: ${APPLICATION_NAME}
      type: ClusterIP
      SessionAffinity: None
  
  # Route to expose service
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${APPLICATION_NAME}
      annotations:
        description: Route for application's http service.
      labels:
        app: ${APPLICATION_NAME}
    spec:
      host: "${HOSTNAME_HTTPS}"
      port:
        targetPort: 3000-tcp
      to:
        kind: Service 
        name: ${APPLICATION_NAME}
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect

  # PVC for app assets upload
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      annotations:
        description: PVC for application assets upload.
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-uploads
    spec:
      storageClassName: ${SC_FILE_UPLOAD}
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: ${FILE_UPLOAD_STORAGE_SIZE}
      volumename: ${APPLICATION_NAME}-uploads

  # App
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    spec:
      strategy:
        type: Recreate
      triggers:
      - type: ConfigChange
      replicas: "${ROCKETCHAT_REPLICAS}"
      selector:
        app: "${APPLICATION_NAME}"
        deploymentConfig: "${APPLICATION_NAME}"
      template:
        metadata:
          labels:
            app: "${APPLICATION_NAME}"
            deploymentConfig: "${APPLICATION_NAME}"
        spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values: 
                    - ${APPLICATION_NAME}
                topologyKey: "kubernetes.io/hostname"
          volumes:
            - name: ${APPLICATION_NAME}-uploads
              persistentVolumeClaim:
                claimName: ${APPLICATION_NAME}-uploads
          containers:
          - image: ${APPLICATION_NAME}:${ROCKETCHAT_IMAGE_TAG}
            name: ${APPLICATION_NAME}
            env:
            - name: MONGO_URL
              valueFrom:
                secretKeyRef:
                  key: mongo-url
                  name: "${MONGODB_SECRET_NAME}"
            - name: MONGO_OPLOG_URL
              valueFrom:
                secretKeyRef:
                  key: mongo-oplog-url
                  name: "${MONGODB_SECRET_NAME}"
            envFrom: 
              - secretRef:
                  name: ${APPLICATION_NAME}-admin-secret
            volumeMounts:
              - name: ${APPLICATION_NAME}-uploads
                mountPath: /app/uploads
            ports:
            - containerPort: 3000
              protocol: TCP
            terminationMessagePath: /dev/termination-log
            livenessProbe:
              httpGet:
                path: /api/info
                port: 3000
                scheme: HTTP
              initialDelaySeconds: 60
              timeoutSeconds: 5
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 3
            readinessProbe:
              httpGet:
                path: /api/info
                port: 3000
                scheme: HTTP
              initialDelaySeconds: 120
              timeoutSeconds: 5
              periodSeconds: 20
              successThreshold: 1
              failureThreshold: 3
            resources:
              limits:
                cpu: "${CPU_LIMIT}"
                memory: "${MEMORY_LIMIT}"
              requests:
                memory: "${MEMORY_REQUEST}"
                cpu: "${CPU_REQUEST}"
          restartPolicy: Always
      triggers:
      - type: ConfigChange
      - imageChangeParams:
          automatic: true
          from:
            kind: ImageStreamTag
            name: ${APPLICATION_NAME}:${ROCKETCHAT_IMAGE_TAG}
          containerNames:
          - ${APPLICATION_NAME}
        type: ImageChange

  # Application HA
  - apiVersion: autoscaling/v1
    kind: HorizontalPodAutoscaler
    metadata:
      labels:
        app: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}-hpa
    spec:
      scaleTargetRef:
        kind: DeploymentConfig 
        name: ${APPLICATION_NAME}
        apiVersion: apps.openshift.io/v1
        subresource: scale
      minReplicas: ${ROCKETCHAT_MIN_HPA}
      maxReplicas: ${ROCKETCHAT_MAX_HPA}
      cpuUtilization:
        targetCPUUtilizationPercentage: 80
