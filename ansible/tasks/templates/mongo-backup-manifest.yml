apiVersion: v1
kind: List
items:
# create the general PVC to hold backups
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "{{ BACKUP_MONGODB_NAME }}"
    namespace: "{{ NAMESPACE }}"
    labels:
      name: "{{ BACKUP_MONGODB_NAME }}"
    annotations:
      description: 'This pvc holds the mongodb backup data'
      tags: 'mongo,backup'
  spec:
    storageClassName: "{{ SC_FILE_UPLOAD }}"
    accessModes:
      - ReadWriteMany
    resources:
      requests:
        storage: "{{ FILE_UPLOAD_STORAGE_SIZE }}"
    volumename: "{{ BACKUP_MONGODB_NAME }}"

# Create configmap to hold backup-restore scripts
- apiVersion: v1
  kind: ConfigMap
  data:
    backup-restore-verify.sh: |-
      #!/bin/bash
      echo "----- Clean up backups -----" &&
      ls -rdt /var/lib/mongodb-backup/dump-* |
      head -n -$MONGODB_BACKUP_KEEP |
      xargs rm -rf &&
      DIR=/var/lib/mongodb-backup/dump-`date +%F-%T` &&
      echo "----- Start mongodump at $DIR -----" &&
      mongodump -j 1 -u admin -p $MONGODB_ADMIN_PASSWORD --host $MONGODB_SERVICE_NAME --port $MONGODB_SERVICE_PORT --authenticationDatabase=admin --gzip --out=$DIR &&
      echo "----- Start mongorestore for db: $MONGODB_DATABASE -----" &&
      mongorestore -u admin -p $MONGODB_ADMIN_PASSWORD --authenticationDatabase admin --gzip $DIR/$MONGODB_DATABASE -d $MONGODB_DATABASE &&
      echo "----- Verify $MONGODB_DATABASE exists -----" &&
      mongo admin -u admin -p $MONGODB_ADMIN_PASSWORD --eval='db.adminCommand( { listDatabases: 1, nameOnly: true, filter: { name: "rocketdb" } } )'
  metadata:
    name: "{{ BACKUP_MONGODB_SCRIPT }}"
    namespace: "{{ NAMESPACE }}"
    labels:
      name: "{{ BACKUP_MONGODB_NAME }}"
    annotations:
      description: 'This shell script runs MongoDB dump, restore and verification steps'
      tags: 'mongo,backup,restore,verify'

# A headless service to create DNS records
- kind: Service
  apiVersion: v1
  metadata:
    namespace: "{{ NAMESPACE }}"
    name: "{{ BACKUP_MONGODB_NAME }}-internal"
    labels:
      name: "{{ BACKUP_MONGODB_NAME }}"
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  spec:    
    clusterIP: None
    ports:
      - name: mongodb
        port: 27017
    selector:
      name: "{{ BACKUP_MONGODB_NAME }}"

# Use a Statefulset to conduct the backup-restore activity
# (make use for predictable pod name)
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    name: "{{ BACKUP_MONGODB_NAME }}"
    namespace: "{{ NAMESPACE }}"
  spec:
    serviceName: "{{ BACKUP_MONGODB_NAME }}-internal"
    replicas: "{{ BACKUP_MONGODB_REPLICAS }}"
    template:
      metadata:
        labels:
          name: "{{ BACKUP_MONGODB_NAME }}"
      spec:
        volumes:
        - name: mongodb-backup
          persistentVolumeClaim:
            claimName: "{{ BACKUP_MONGODB_NAME }}"
        - name: backup-restore-verify
          configMap:
            name: "{{ BACKUP_MONGODB_SCRIPT }}"
            defaultMode: 0777
        containers:
          - name: "{{ BACKUP_MONGODB_NAME }}"
            image: "{{ MONGODB_IMAGE }}:{{ MONGODB_IMAGE_TAG }}"
            command:
              - 'bash'
              - '-c'
              - 'run-mongod'
            resources:
              limits:
                cpu: 250m
                memory: 1Gi
              requests:
                cpu: 100m
                memory: 512Mi
            env:
              - name: MONGODB_BACKUP_KEEP
                value: "{{ MONGODB_BACKUP_KEEP }}"
              - name: MONGODB_SERVICE_NAME
                value: "{{ MONGODB_SERVICE_NAME }}"
              - name: MONGODB_SERVICE_PORT
                value: "{{ MONGODB_SERVICE_PORT }}"
              # Env var for local run-mongod service setup, (obtained from original mongodb secret):
              - name: MONGODB_USER
                valueFrom:
                  secretKeyRef:
                    key: username
                    name: "{{ MONGODB_SECRET_NAME }}"
              - name: MONGODB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: password
                    name: "{{ MONGODB_SECRET_NAME }}"
              - name: MONGODB_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: database
                    name: "{{ MONGODB_SECRET_NAME }}"
              - name: MONGODB_ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: admin-password
                    name: "{{ MONGODB_SECRET_NAME }}"
            volumeMounts:
              - name: mongodb-backup
                mountPath: /var/lib/mongodb-backup
              - name: backup-restore-verify
                mountPath: "/var/lib/mongodb/backup-restore-verify.sh"
                subPath: "backup-restore-verify.sh"
            readinessProbe:
              tcpSocket:
                port: 27017
              initialDelaySeconds: 20
              timeoutSeconds: 5
              periodSeconds: 10
              successThreshold: 1
              failureThreshold: 3
