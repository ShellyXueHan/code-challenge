apiVersion: v1
kind: List
items:
# Secrets for mongo DB 
- apiVersion: v1
  kind: Secret
  metadata:
    namespace: "{{ NAMESPACE }}"
    name: "{{ MONGODB_SECRET_NAME }}"
    labels:
      app: "{{ APPLICATION_NAME }}"
      name: "{{ MONGODB_SERVICE_NAME }}"
  stringData:
    username: "{{ MONGODB_USER }}"
    password: "{{ MONGODB_PASSWORD }}"
    admin-username: "admin"
    admin-password: "{{ MONGODB_ADMIN_PASSWORD }}"
    database: "{{ MONGODB_DATABASE }}"
    replica-name: "{{ MONGODB_REPLICA_NAME }}"
    mongo-url: "mongodb://{{ MONGODB_USER }}:{{ MONGODB_PASSWORD }}@{{ MONGODB_SERVICE_NAME }}:27017/{{ MONGODB_DATABASE }}?replicaSet={{ MONGODB_REPLICA_NAME }}"
    mongo-oplog-url: "mongodb://admin:{{ MONGODB_ADMIN_PASSWORD }}@{{ MONGODB_SERVICE_NAME }}:27017/local?authSource=admin&replicaSet={{ MONGODB_REPLICA_NAME }}"

# A non-headless service which takes pod readiness into consideration
- kind: Service
  apiVersion: v1
  metadata:
    namespace: "{{ NAMESPACE }}"
    name: "{{ MONGODB_SERVICE_NAME }}"
    labels:
      name: "{{ MONGODB_SERVICE_NAME }}"
      app: "{{ APPLICATION_NAME }}"
  spec:
    ports:
      - name: mongodb
        port: 27017
    selector:
      name: "{{ MONGODB_SERVICE_NAME }}"

# A headless service to create DNS records
- kind: Service
  apiVersion: v1
  metadata:
    namespace: "{{ NAMESPACE }}"
    name: "{{ MONGODB_SERVICE_NAME }}-internal"
    labels:
      name: "{{ MONGODB_SERVICE_NAME }}"
      app: "{{ APPLICATION_NAME }}"
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  spec:    
    clusterIP: None
    ports:
      - name: mongodb
        port: 27017
    selector:
      name: "{{ MONGODB_SERVICE_NAME }}"

# Mongo DB StatefulSet
- kind: StatefulSet
  apiVersion: apps/v1beta1
  metadata:
    namespace: "{{ NAMESPACE }}"
    name: "{{ MONGODB_SERVICE_NAME }}"
  spec:
    serviceName: "{{ MONGODB_SERVICE_NAME }}-internal"
    replicas: "{{ MONGODB_REPLICAS }}"
    template:
      metadata:
        labels:
          name: "{{ MONGODB_SERVICE_NAME }}"
          app: "{{ APPLICATION_NAME }}"
      spec:
        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: name
                  operator: In
                  values: 
                  - "{{ MONGODB_SERVICE_NAME }}"
              topologyKey: "kubernetes.io/hostname"
        volumes:
        - name: "scl-enable"
          configMap:
            name: "scl-enable"
        containers:
          - name: mongo-container
            image: "{{ MONGODB_IMAGE }}:{{ MONGODB_IMAGE_TAG }}"
            ports:
              - containerPort: 27017
            args:
              - "run-mongod-replication"
            volumeMounts:
              - name: mongo-data
                mountPath: "/var/lib/mongodb/data"
              - name: scl-enable
                mountPath: "/etc/profile.d/scl_enable.sh"
                subPath: "scl_enable.sh"
            env:
              - name: MONGODB_USER
                valueFrom:
                  secretKeyRef:
                    key: username
                    name: "{{ MONGODB_SECRET_NAME }}"
              - name: MONGODB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: password
                    name: "{{ MONGODB_SECRET_NAME }}"
              - name: MONGODB_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: database
                    name: "{{ MONGODB_SECRET_NAME }}"
              - name: MONGODB_ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: admin-password
                    name: "{{ MONGODB_SECRET_NAME }}"
              - name: MONGO_OPLOG_URL
                valueFrom:
                  secretKeyRef:
                    key: mongo-oplog-url
                    name: "{{ MONGODB_SECRET_NAME }}"
              - name: MONGODB_REPLICA_NAME
                valueFrom:
                  secretKeyRef:
                    key: replica-name
                    name: "{{ MONGODB_SECRET_NAME }}"
              - name: MONGODB_KEYFILE_VALUE
                value: "{{ MONGODB_KEYFILE_VALUE }}"
              - name: MONGODB_SERVICE_NAME
                value: "{{ MONGODB_SERVICE_NAME }}-internal"
            resources:
              limits:
                memory: "{{ MEMORY_LIMIT }}"
                cpu: "{{ CPU_LIMIT }}"
              requests:
                memory: "{{ MEMORY_REQUEST }}"
                cpu: "{{ CPU_REQUEST }}"
            readinessProbe:
              exec:
                command:
                  - stat
                  - /tmp/initialized
    volumeClaimTemplates:
      - metadata:
          name: mongo-data
          labels:
            app: "{{ APPLICATION_NAME }}"
            name: "{{ MONGODB_SERVICE_NAME }}"
        spec:
          accessModes:
            - ReadWriteOnce
          storageClassName: "{{ SC_MONGO }}"
          resources:
            requests:
              storage: "{{ VOLUME_CAPACITY }}"
